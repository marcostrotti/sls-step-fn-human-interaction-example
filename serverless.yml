
service: sls-step-fn-human-interaction-example
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name


frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  stage: ${opt:stage,'dev'}
  region: us-east-1


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

plugins:
  - serverless-bundle
  - serverless-step-functions
  - serverless-iam-roles-per-function
package:
  individually: true

functions:
  waitFunction:
    handler: functions/waitFunction.default
    package:
      include:
        - waitFunction.js
  processTaskToken:
    handler: functions/processTaskToken.default
    package:
      include:
      - processTaskToken.js
    iamRoleStatementsName: processTaskToken-Role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - states:SendTaskSuccess
          - states:SendTaskFailure
        Resource: "*"
    events:
      - http:
          path: next
          method: POST  
    

stepFunctions:
  stateMachines:
    myStateMachine:
      name: "state-machine"
      events:
        - http:
            path: hello
            method: POST
      definition:
        Comment: "A state machine I created for this article"
        StartAt: "waitState"
        States:
          waitState:
            Comment: "Execute Wait Activity"
            Type: Task
            Resource: "arn:aws:states:::lambda:invoke.waitForTaskToken"
            Parameters: 
              FunctionName: { "Fn::GetAtt": [ 
              "waitFunction", "Arn" 
              ]}
              Payload: {
                "req.$" : "$",
                "taskToken.$" : "$$.Task.Token"
              }
            Next: Done
          Done:
            Type: Pass
            End: true

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
